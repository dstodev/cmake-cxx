name: CI

on:
  push:
  pull_request:
    branches:
      - main

  workflow_dispatch: # https://docs.github.com/en/actions/using-workflows/manually-running-a-workflow
    inputs:
      build-type:
        description: 'Build type'
        default: 'Release'
        type: choice
        options:
          - 'Debug'
          - 'Release'
        required: true

      job-filter:
        description: 'Only run jobs containing this string'
        default: ''
        type: string
        required: false

      log-level:
        description: 'Log level (Debug only)'
        default: 'info'
        type: choice
        options:
          - 'error'
          - 'warning'
          - 'info'
          - 'debug'
          - 'trace'
        required: false

      verbose:
        description: 'Verbose build (MacOS & Linux)'
        default: false
        type: boolean
        required: false

env:
  # Defaults
  DEFAULT_BUILD_TYPE: 'Release'
  DEFAULT_JOB_FILTER: ''
  DEFAULT_LOG_LEVEL: 'info'
  DEFAULT_VERBOSE: false

jobs:
  cfg:
    runs-on: ubuntu-latest
    outputs: # https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs
      build-type: ${{ steps.build-type.outputs.build-type }}
      job-filter: ${{ steps.job-filter.outputs.job-filter }}
      log-level: ${{ steps.log-level.outputs.log-level }}
      verbose: ${{ steps.verbose.outputs.verbose }}
    steps:
      - id: build-type
        name: build-type
        run: |
          build_type='${{ inputs.build-type }}'
          build_type=${build_type:-$DEFAULT_BUILD_TYPE}
          echo "build-type=$build_type" | tee -a "$GITHUB_OUTPUT"

      - id: job-filter
        name: job-filter
        run: |
          job_filter='${{ inputs.job-filter }}'
          job_filter=${job_filter:-$DEFAULT_JOB_FILTER}
          echo "job-filter=$job_filter" | tee -a "$GITHUB_OUTPUT"

      - id: log-level
        name: log-level
        run: |
          log_level='${{ inputs.log-level }}'
          log_level=${log_level:-$DEFAULT_LOG_LEVEL}
          echo "log-level=$log_level" | tee -a "$GITHUB_OUTPUT"

      - id: verbose
        name: verbose
        run: |
          verbose='${{ inputs.verbose }}'
          verbose=${verbose:-$DEFAULT_VERBOSE}
          echo "verbose=$verbose" | tee -a "$GITHUB_OUTPUT"

  run-docker-tests-bash:
    if: contains('run-docker-tests-bash', needs.cfg.outputs.job-filter)
    needs: cfg
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3  # https://github.com/marketplace/actions/checkout
      - run: script/run-docker-tests.bash

  native-windows:
    if: contains('native-windows', needs.cfg.outputs.job-filter)
    needs: cfg
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure
        run: cmake -S . -B build/$env:BUILD_TYPE
      - name: Run tests
        run: cmake --build build/$env:BUILD_TYPE --target all-test --config $env:BUILD_TYPE --parallel
      - name: Build package
        run: cmake --build build/$env:BUILD_TYPE --target app-sample --parallel
      - uses: actions/upload-artifact@v3  # https://github.com/actions/upload-artifact
        with:
          name: package-${{ github.job }}
          path: build/${{ env.BUILD_TYPE }}/*.tar.xz
    env:
      BUILD_TYPE: ${{ needs.cfg.outputs.build-type }}
      LOG_LEVEL: ${{ needs.cfg.outputs.log-level }}

  native-macos:
    if: contains('native-macos', needs.cfg.outputs.job-filter)
    needs: cfg
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure
        run: |
          cmake_flags=(
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          )
          if [ "$VERBOSE_MAKEFILE" = 'true' ]; then
            cmake_flags+=('-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON')
          fi
          cmake -S . -B build/$BUILD_TYPE "${cmake_flags[@]}"
      - name: Run tests
        run: cmake --build build/$BUILD_TYPE --target all-test --parallel
      - name: Build package
        run: cmake --build build/$BUILD_TYPE --target app-sample --parallel
      - uses: actions/upload-artifact@v3
        with:
          name: package-${{ github.job }}
          path: build/${{ env.BUILD_TYPE }}/*.tar.xz
    env:
      BUILD_TYPE: ${{ needs.cfg.outputs.build-type }}
      LOG_LEVEL: ${{ needs.cfg.outputs.log-level }}
      VERBOSE_MAKEFILE: ${{ needs.cfg.outputs.verbose }}

  native-linux:
    if: contains('native-linux', needs.cfg.outputs.job-filter)
    needs: cfg
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure
        run: |
          cmake_flags=(
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          )
          if [ "$VERBOSE_MAKEFILE" = 'true' ]; then
            cmake_flags+=('-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON')
          fi
          cmake -S . -B build/$BUILD_TYPE "${cmake_flags[@]}"
      - name: Run tests
        run: cmake --build build/$BUILD_TYPE --target all-test --parallel
      - name: Build package
        run: cmake --build build/$BUILD_TYPE --target app-sample --parallel
      - uses: actions/upload-artifact@v3
        with:
          name: package-${{ github.job }}
          path: build/${{ env.BUILD_TYPE }}/*.tar.xz
    env:
      BUILD_TYPE: ${{ needs.cfg.outputs.build-type }}
      LOG_LEVEL: ${{ needs.cfg.outputs.log-level }}
      VERBOSE_MAKEFILE: ${{ needs.cfg.outputs.verbose }}
